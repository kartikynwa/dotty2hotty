# Filename:      /etc/zsh/zshrc
# DOT_DEST=.zshrc
# Purpose:       config file for zsh (z shell)
# Author:        moi

# History - Relics of the past.
HISTFILE=~/.config/zsh.d/history
HISTSIZE=1000
SAVEHIST=1000

# title to something sane
precmd () { print -Pn "\e]0;$TITLE\a" }
title() { export TITLE="$*" }

# add to fpath
fpath=(~/.config/zsh.d ~/.local/etc/bash_completion.d $fpath)

# Variables
PATH="${HOME}/.cargo/bin:${HOME}/.local/bin:/opt/texlive/2018/bin/x86_64-linux:${PATH}:${GOPATH}/bin"
PATH="/home/kartik/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/kartik/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/kartik/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/kartik/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/kartik/perl5"; export PERL_MM_OPT;
SCRCPY_SERVER_PATH=/usr/share/scrcpy/scrcpy-server-v1.9.jar

export BROWSER="firefox"
export EDITOR="vim"
export SUDO_EDITOR="rvim"
export PASSWORD_STORE_CLIP_TIME=5
export WINEDEBUG=-all
# export GOROOT="/usr/lib/go"
# export GOPATH="${HOME}/go"
# export RUST_SRC_PATH="$( rustc --print sysroot )/lib/rustlib/src/rust/src"


# Colours for ls
LS_COLORS='rs=0:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:';
export LS_COLORS

# Keybindings
bindkey -e
typeset -g -A key
bindkey '^?' backward-delete-char
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[D' backward-char
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char 
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# Shell options
setopt autocd \
       hist_verify \
       hist_append \
       hist_save_no_dups \
       hist_ignore_space \
       hist_ignore_all_dups

# Aliases (or Alii)
alias :q="exit"
alias n="NNN_USE_EDITOR=1 NNN_OPENER=rifle nnn"
alias ra="ranger"
alias ls="ls --color -F --group-directories-first"
alias ll="ls --color -lh --group-directories-first"
alias rm="rm -vI"
alias cp="cp -vi"
alias mv="mv -vi"
alias mkdir="mkdir -pv"
alias syslog="socklog"
alias v="nvim"
alias bulkrename="qmv -f do"
alias td="transmission-daemon"
alias tr="transmission-remote"
alias za="zathura"
alias rw="wpa_cli -i wlp5s0 disconnect && wpa_cli -i wlp5s0 reconnect" # my wifi chip is trash
alias wlp5s0="wpa_cli -i wlp5s0"
alias open="xdg-open"

alias xs="xbps-query -Rs"
alias xu="sudo xbps-install -Su"
alias mkdoc="sudo makewhatis /usr/share/man"

alias 'gcm '="git commit -m "
alias gp="git push"

alias getsubtitle="subliminal download -l en"
alias porn="mpv 'https://www.pornhub.com/random'"

# Modules
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache on
zstyle ':completion:*' rehash yes
zstyle ':completion:*' list-colors

# Prompt
autoload -U colors zsh/terminfo
colors
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git hg
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' formats "%{${fg[cyan]}%}[%{${fg[green]}%}%s%{${fg[cyan]}%}][%{${fg[blue]}%}%r/%S%%{${fg[cyan]}%}][%{${fg[blue]}%}%b%{${fg[yellow]}%}%m%u%c%{${fg[cyan]}%}]%{$reset_color%}"

setprompt() {
  setopt prompt_subst

  if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then 
    p_host='%F{yellow}%M%f'
  else
    p_host='%F{blue}%M%f'
  fi

  PS1=${(j::Q)${(Z:Cn:):-$'
    %(!.%F{red}%n%f.%F{blue}%n%f)
    %F{cyan}@%f
    ${p_host}
    " "
    %(!.%F{red}%#%f.%F{magenta}%#%f)
    " "
  '}}

  PS2=$'%_>'

  RPROMPT=${(j::Q)${(Z:Cn:):-$'
    %F{cyan}"("%f
    %F{blue}%.%f
    %F{cyan}")"%f
  '}}
}
setprompt

# setprompt() {
#   setopt prompt_subst
# 
#   if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then 
#     p_host='%F{yellow}%M%f'
#   else
#     p_host='%F{blue}%M%f'
#   fi
# 
#   PS1=${(j::Q)${(Z:Cn:):-$'
#     %F{blue}%~%f
#     " "
#     %(!.%F{blue}%#%f.%F{blue}%#%f)
#     " "
#   '}}
# 
#   PS2=$'%_>'
#   RPROMPT=$'${vcs_info_msg_0_}'
# }

# setprompt

# PS1=$'%{\e[0;31m♥%} %{\e[0;91m%}%c %{\e[0;35m%}❯%{\e[0m%} '

checksha256 () {
  FILE=$(mktemp)
  curl "$1" > "$FILE"
  sha256sum "$FILE"
  rm "$FILE"
}

cheat () {
  if [ -n $1 ]; then
    curl cheat.sh/$1
  else
    echo "USAGE: cheat <command>"
  fi
}
compdef cheat=whereis

# shuffle music/media
shuffle () {
  if [ -z $1 ]; then
    mpv --shuffle --no-audio-display --no-resume-playback .
  else
    mpv --shuffle --no-audio-display --no-resume-playback "$@"
  fi
}

# mkcd, mkdir and cd's illegitimate daughter
mkcd () {
  if [ -n $1 ]; then
    mkdir -vp "$1"
    cd "$1"
  else 
    echo "mkcd: missing operand"
  fi
}

# alias vod="mpv \"$(xsel -b)\""
vod () {
  mpv "$(xsel)"
}

# countdown
countdown () {
  sleep "$@" && cmus-remote -u
}

# acempv function
acempv () {
  link=""
  if [ -z $1 ]
  then
    link="$(xsel)"
    echo "link=${link}"
  else
    link="$1"
  fi
  mpv --profile=acestream "acestream://${link}"
}

iwantopus () {

  if [ -z "$1" ]
  then
    input_format="flac"
  else
    input_format=$1
  fi

  mkdir -p "./opus"

  # Using ffmpeg
  fd -e "${input_format}" -d 1 -x ffmpeg -i "{}" -b:a 320k "./opus/{.}.opus"

  # Using opusenc
  # fd -e "${input_format}" -d 1 -x opusenc "{}" --bitrate 320 "./opus/{.}.opus"

}

# smloadr function
smloadr () {
  if [ -x /home/kartik/Music/smloadr ]
  then
    DIR=${PWD}
    cd /home/kartik/Music/smloadr
    ./SMLoadr-linux-x64 $1
    cd ${DIR}
  else
    echo "File doesn't exist: ~/Music/smloadr/SMLoadr-linux-x64"
  fi
}

# twitch wrapper with streamlink, mpv function
twitch () {
  if [ -n "$1" ]
  then
    if [ -n "$2" ]
    then
      streamlink -p mpv "https://twitch.tv/${1}" ${2}
    else
      streamlink -p mpv "https://twitch.tv/${1}" best
    fi
  else
    echo "USAGE: twitch channel_name [quality]"
  fi
}

# Music sync function
musicsync () {

  help () {
    echo "USAGE: musicsync [-p PORT] [-d] [-r] [<target_ip>]"
    echo "  -p PORT      assign target port number"
    echo "  -d           delete files missing from host"
    echo "  -r           switch host and target (reverse)"
    echo "  -h HOSTNAME  fetch host info from ssh_config"
  }

  local rsync_delete_flag=""
  local reverse=""

  local target_ip=192.168.0.179
  local target_port=22

  local target_hostname="ph1"

  while getopts "drp:h:" opt
  do
    case ${opt} in
      p)
        target_port=${OPTARG}
        ;;
      r)
        reverse="-r"
        ;;
      d)
        rsync_delete_flag="--delete"
        ;;
      h)
        target_hostname=${OPTARG}
        ;;
    esac
  done

  local ssh_G_output=$( ssh -G ${target_hostname} 2> /dev/null )
  target_ip=$( echo "$ssh_G_output" | grep "^hostname " | awk '{ print $2 }' )
  target_port=$( echo "$ssh_G_output" | grep "^port " | awk '{ print $2 }' )

  shift $(($OPTIND - 1))
  if [ ! -z "$@" ]
  then
    target_ip="$@"
  fi
  
  local host_music_dir=~/Music/synced_music
  local target_music_dir=/sdcard/Music/synced_music
  
  echo "Syncing files:"

  if [ -z "${reverse}" ]
  then
    local src=${host_music_dir%/}/
    local dest=${target_ip}:${target_music_dir%/}/
    echo "Source : ${src}"
    echo "Dest.  : ${dest}, Port ${target_port}"
  else
    local src=${target_ip}:/sdcard/Music/synced_music/
    local dest=~/Music/synced_music/
    echo "Source : ${src}, Port ${target_port}"
    echo "Dest.  : ${dest}"
  fi

  rsync --recursive --size-only --verbose --progress --ignore-existing\
    -e "ssh -p ${target_port}" ${rsync_delete_flag}\
    ${src} ${dest}
}

