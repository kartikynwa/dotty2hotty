# Filename:      /etc/zsh/zshrc
# DOT_DEST=.zshrc
# Purpose:       config file for zsh (z shell)
# Author:        moi

# History - Relics of the past.
HISTFILE=~/.config/zsh.d/history
HISTSIZE=1000
SAVEHIST=1000

# title to something sane
precmd () { print -Pn "\e]0;$TITLE\a" }
title() { export TITLE="$*" }

# add to fpath
fpath=(~/.config/zsh.d ~/.local/etc/bash_completion.d $fpath)
fpath=(~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/zsh/site-functions $fpath)

# Variables
GOPATH="${HOME}/.go"
PATH="${HOME}/.cargo/bin:${HOME}/.local/bin:${PATH}:${GOPATH}/bin"
PATH="/home/kartik/perl5/bin${PATH:+:${PATH}}"
PATH=~/.local/share/npm-global/bin:$PATH
PATH=~/.emacs.d/bin:$PATH

PERL5LIB="/home/kartik/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/kartik/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/kartik/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/kartik/perl5"; export PERL_MM_OPT;
SCRCPY_SERVER_PATH=/usr/share/scrcpy/scrcpy-server-v1.9.jar

BROWSER="firefox"
EDITOR="vim"
SUDO_EDITOR="rvim"
PASSWORD_STORE_CLIP_TIME=5
WINEDEBUG=-all
# export GOROOT="/usr/lib/go"
# export RUST_SRC_PATH="$( rustc --print sysroot )/lib/rustlib/src/rust/src"


# Colours for ls
LS_COLORS='rs=0:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=01;44:st=37;44:ex=01;32:';
export LS_COLORS

# Keybindings
bindkey -e
typeset -g -A key
bindkey '^?' backward-delete-char
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[D' backward-char
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# Shell options
setopt autocd \
       hist_verify \
       hist_append \
       hist_save_no_dups \
       hist_ignore_space \
       hist_ignore_all_dups

# Aliases (or Alii)
alias :q="exit"
alias n="NNN_USE_EDITOR=1 nnn"
alias ra="ranger"
alias ls="ls --color -F --group-directories-first"
alias l=ls
alias ll="ls --color -lh --group-directories-first"
alias rm="rm -vI"
alias cp="cp -vi"
alias mv="mv -vi"
alias mkdir="mkdir -pv"
alias syslog="socklog"
alias v="nvim"
alias e="TERM=alacritty-direct emacs -nw"
alias bulkrename="qmv -f do"
alias tremote="transmission-remote"
alias za="zathura"
alias rw="wpa_cli -i wlp5s0 disconnect && wpa_cli -i wlp5s0 reconnect" # my wifi chip is trash
alias wlp5s0="wpa_cli -i wlp5s0"
alias open="xdg-open"
alias protocol="sudo xbps-install -Suy && sudo poweroff"

alias xs="xbps-query -Rs"
alias xu="sudo xbps-install -Su"
alias mkdoc="sudo makewhatis /usr/share/man"

alias gcm="git commit -m"
alias gp="git push"

alias getsubtitle="subliminal download -l en"
alias mpdscribble="/usr/bin/mpdscribble --conf ~/.config/mpdscribble/mpdscribble.conf"
alias shuffle_library="mpc listall synced_music/ | ashuffle -f - & disown"

alias tb="nc termbin.com 9999"

alias btctl="bluetoothctl"
alias bton="bluetoothctl -- power on"
alias btoff="bluetoothctl -- power off"

alias mpd-study="mpd ~/.config/mpd-study_music/mpd.conf"
alias yr="pkill yambar; yambar & disown"

# Modules
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache on
zstyle ':completion:*' rehash yes
zstyle ':completion:*' list-colors

# Prompt
# autoload -U colors zsh/terminfo
# colors
# autoload -Uz vcs_info
# zstyle ':vcs_info:*' enable git hg
# zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:git*' formats "%{${fg[cyan]}%}[%{${fg[green]}%}%s%{${fg[cyan]}%}][%{${fg[blue]}%}%r/%S%%{${fg[cyan]}%}][%{${fg[blue]}%}%b%{${fg[yellow]}%}%m%u%c%{${fg[cyan]}%}]%{$reset_color%}"

setprompt() {
  setopt prompt_subst

  if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then
    p_host='%F{yellow}%M%f'
  else
    p_host='%F{blue}%M%f'
  fi

  PS1=${(j::Q)${(Z:Cn:):-$'
    %(!.%F{red}%n%f.%F{blue}%n%f)
    %F{cyan}@%f
    ${p_host}
    " "
    %(!.%F{red}%#%f.%F{magenta}%#%f)
    " "
  '}}

  PS2=$'%_>'

  RPROMPT=${(j::Q)${(Z:Cn:):-$'
    %F{cyan}"("%f
    %F{blue}%.%f
    %F{cyan}")"%f
  '}}
}

checksha256 () {
  FILE=$(mktemp)
  curl "$1" > "$FILE"
  sha256sum "$FILE"
  rm "$FILE"
}

cheat () {
  if [ -n $1 ]; then
    curl "cheat.sh/${1}"
  else
    echo "USAGE: cheat <command>"
  fi
}
compdef cheat=whereis

# shuffle folder
shuffle () {
  if [ -z $1 ]; then
    mpv --shuffle --audio-display=no --no-resume-playback .
  else
    mpv --shuffle --audio-display=no --no-resume-playback "$@"
  fi
}

# mkcd, mkdir and cd's illegitimate daughter
mkcd () {
  if [ -n $1 ]; then
    mkdir -vp "$1"
    cd "$1"
    echo "traversed into created directory"
  else
    echo "mkcd: missing operand"
  fi
}

# acempv function
acempv () {
  link=""
  if [ -z $1 ]
  then
    link="$(xsel)"
    echo "link=${link}"
  else
    link="$1"
  fi
  mpv --profile=acestream "acestream://${link}"
}

# convert lossless to opus
iwantopus () {
  if [ -z "$1" ]
  then
    input_format="flac"
  else
    input_format=$1
  fi

  mkdir -p "./opus"

  # Using ffmpeg
  fd -e "${input_format}" -d 1 -x ffmpeg -i "{}" -b:a 320k "./opus/{.}.opus"

  # Using opusenc
  # fd -e "${input_format}" -d 1 -x opusenc "{}" --bitrate 320 "./opus/{.}.opus"
}

# twitch wrapper with streamlink, mpv function
twitch () {
  if [ -n "$1" ]
  then
    if [ -n "$2" ]
    then
      streamlink -p mpv "https://twitch.tv/${1}" "${2}"
    else
      streamlink -p mpv "https://twitch.tv/${1}" best
    fi
  else
    echo "USAGE: twitch channel_name [quality]"
  fi
}

# # NVM: Node Version Manager
# export NVM_DIR="$HOME/.local/share/nvm"
# # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# load-nvm () {
#   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# }
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

sauce() {
  if [ -f "$1" ]; then
    source "$1"
  fi
}
for file (
    /usr/share/doc/fzf/key-bindings.zsh
    "$CARGO_HOME/env"
  )
do
  sauce "$file"
done

eval "$(starship init zsh)"
